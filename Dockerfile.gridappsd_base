# This is a xenial base with python 3.5 as well
FROM python:3.7.9-slim-stretch AS builder

#FROM ubuntu:xenial


RUN apt-get update \
    && apt-get install -y \
       wget \
       git \
       automake \
       autoconf \
       cmake \
       make \
       g++-6 \
       gcc-6 \
       libtool \
       ca-certificates \
       openssl \
       # These two for activemq \       
       libaprutil1-dev \
       mysql-client \
       python-dev \ 
       python-pip \
       sudo \
       vim \
       # state-estimator \
       liblapack-dev \
       libblas-dev \
       libssl1.0-dev \
       # helics \
       libboost-dev \
       libzmq5-dev \
       m4 \
    && sudo /usr/bin/update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 1 \
    && sudo /usr/bin/update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-6 1 \
    && sudo sudo /usr/bin/update-alternatives  --set gcc /usr/bin/gcc-6 \
    && sudo sudo /usr/bin/update-alternatives  --set g++ /usr/bin/g++-6 \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /var/cache/apt/archives/*

# Build and install gcc 8
RUN cd /opt \
    && wget http://ftp.mirrorservice.org/sites/sourceware.org/pub/gcc/releases/gcc-8.4.0/gcc-8.4.0.tar.gz \
    && tar zxf gcc-8.4.0.tar.gz \
    && cd gcc-8.4.0 \
    && ./contrib/download_prerequisites \
    && apt -y install build-essential \
    && ./configure --disable-multilib \
    && make -j 4 \
    && make install \
    && cd \
    && rm -rf /opt/gcc-8.4.0 /opt/gcc-8.4.0.tar.gz \
    && sudo /usr/bin/update-alternatives --install /usr/bin/gcc gcc /usr/local/bin/gcc 1 \
    && sudo /usr/bin/update-alternatives --install /usr/bin/g++ g++ /usr/local/bin/g++ 1 \
    && sudo sudo /usr/bin/update-alternatives  --set gcc /usr/local/bin/gcc \
    && sudo sudo /usr/bin/update-alternatives  --set g++ /usr/local/bin/g++

FROM builder

WORKDIR /gridappsd

ENV GRIDAPPSD=/gridappsd
ENV FNCS_INSTALL=${GRIDAPPSD}
ENV GLD_INSTALL=${GRIDAPPSD}
ENV CZMQ_VERSION 4.2.0
ENV ZMQ_VERSION 4.3.1
ENV TEMP_DIR=/tmp/source

ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${FNCS_INSTALL}/lib

ENV FNCS_LOG_FILE=yes
ENV FNCS_LOG_STDOUT=yes
ENV FNCS_LOG_TRACE=yes
ENV FNCS_LOG_LEVEL=DEBUG1

# ----------------------------------------------------
# INSTALL ZMQ and BINDINGS for c++
# ----------------------------------------------------

RUN mkdir ${TEMP_DIR} \
    && cd ${TEMP_DIR} \
    && wget http://github.com/zeromq/libzmq/releases/download/v${ZMQ_VERSION}/zeromq-${ZMQ_VERSION}.tar.gz \
    && tar -xzf zeromq-${ZMQ_VERSION}.tar.gz \
    && cd ${TEMP_DIR}/zeromq-${ZMQ_VERSION} \
    && ./configure --prefix=${FNCS_INSTALL} \
    && make \
    && make install \
    && cd /tmp \
    && /bin/rm -r ${TEMP_DIR}/zeromq-${ZMQ_VERSION} \
    && /bin/rm ${TEMP_DIR}/zeromq-${ZMQ_VERSION}.tar.gz

ENV CFLAGS=-I${FNCS_INSTALL}/include
ENV LDFLAGS=-L${FNCS_INSTALL}/lib
ENV PKG_CONFIG_PATH=${FNCS_INSTALL}/lib/pkgconfig

RUN cd ${TEMP_DIR} \
    && wget https://github.com/zeromq/czmq/releases/download/v${CZMQ_VERSION}/czmq-${CZMQ_VERSION}.tar.gz \
    && tar -xzf czmq-${CZMQ_VERSION}.tar.gz \
    && cd ${TEMP_DIR}/czmq-${CZMQ_VERSION} \
    && ./configure --prefix=${FNCS_INSTALL} \
    && make \
    && make install \
    && cd /tmp \
    && /bin/rm -r ${TEMP_DIR}/czmq-${CZMQ_VERSION} \
    && /bin/rm ${TEMP_DIR}/czmq-${CZMQ_VERSION}.tar.gz

ENV CLFAGS=
ENV LDFLAGS=
ENV PKG_CONFIG_PATH=

# ----------------------------------------------------
# INSTALL FNCS
# ----------------------------------------------------

RUN cd $TEMP_DIR \
    && git clone -b develop --single-branch https://github.com/GRIDAPPSD/fncs.git \
    && cd fncs \
    && ./configure --prefix=${FNCS_INSTALL} --with-zmq=${FNCS_INSTALL} \
    && make \
    && make install \
    && cd python \
    && python setup.py sdist \
    && pip install dist/fncs-2.0.1.tar.gz \
    && pip3 install dist/fncs-2.0.1.tar.gz \
    && cd /tmp \
    && /bin/rm -r ${TEMP_DIR}/fncs

# ----------------------------------------------------
# INSTALL Helics
# ----------------------------------------------------

RUN cd $TEMP_DIR \
    && git clone https://github.com/GMLC-TDC/HELICS \
    && cd HELICS \
    && mkdir build \
    && cd build \
    && cmake ../ \
    && make \
    && make install \
    && cd /tmp \
    && /bin/rm -r ${TEMP_DIR}/HELICS \
    && pip install helics  \
    && pip install helics-apps \
    && pip3 install helics \
    && pip3 install helics-apps 

# ----------------------------------------------------
# INSTALL Gridlab-D
# ----------------------------------------------------

RUN cd $TEMP_DIR \
    && git clone https://github.com/gridlab-d/gridlab-d.git -b develop --single-branch \
    && cd ${TEMP_DIR}/gridlab-d/third_party \
    && tar -xzf xerces-c-3.2.0.tar.gz \
    && cd ${TEMP_DIR}/gridlab-d/third_party/xerces-c-3.2.0 \
    && ./configure \
    && make \
    && make install \
    && cd ${TEMP_DIR}/gridlab-d \
    && autoreconf -if \
    && ./configure --with-helics=/usr/local/bin --prefix=$GLD_INSTALL --with-fncs=$FNCS_INSTALL --enable-silent-rules 'CFLAGS=-g -O2 -w' 'CXXFLAGS=-g -O2 -w -std=c++14' 'LDFLAGS=-g -O2 -w' \
    && make \
    && make install \
    && cd /tmp \
    && /bin/rm -r ${TEMP_DIR}/gridlab-d

# ----------------------------------------------------
# INSTALL Java
# ----------------------------------------------------

RUN apt update \
     && mkdir -p /usr/share/man/man1 \
     && apt install -y openjdk-8-jdk-headless \
     && apt-get clean

# ----------------------------------------------------
# INSTALL Activemq c++ extensions
# ----------------------------------------------------
RUN cd ${TEMP_DIR} \
    && wget http://archive.apache.org/dist/activemq/activemq-cpp/3.9.4/activemq-cpp-library-3.9.4-src.tar.gz \
    && tar -xzf activemq-cpp-library-3.9.4-src.tar.gz \
    && cd activemq-cpp-library-3.9.4 \
    && ./configure --prefix=${FNCS_INSTALL} \
    && make \
    && make install \
    && cd /tmp \
    && /bin/rm -r ${TEMP_DIR}/activemq-cpp-library-3.9.4 \
    && /bin/rm -r ${TEMP_DIR}/activemq-cpp-library-3.9.4-src.tar.gz 

# ----------------------------------------------------
# INSTALL Python requirements 
# ----------------------------------------------------
COPY ./requirements_base.txt /gridappsd/requirements_base.txt
RUN pip install -r /gridappsd/requirements_base.txt && \
  rm -rf /root/.cache/pip/wheels

# ----------------------------------------------------
# INSTALL State Estimator
# ----------------------------------------------------
RUN cd ${TEMP_DIR} \
  && git clone https://github.com/GRIDAPPSD/gridappsd-state-estimator \
  && cd gridappsd-state-estimator \
  && git clone https://github.com/GRIDAPPSD/SuiteSparse \
  && git clone https://github.com/GRIDAPPSD/json \
  && make -C SuiteSparse LAPACK=-llapack BLAS=-lblas \
  && make -C state-estimator \
  && mkdir -p /gridappsd/services/gridappsd-state-estimator \
  && rm -rf .git SuiteSparse/.git json.git \
  && cp -r * /gridappsd/services/gridappsd-state-estimator \
  && cp /gridappsd/services/gridappsd-state-estimator/state-estimator.config /gridappsd/services/ \
  && cd /tmp \
  && /bin/rm -r ${TEMP_DIR}/gridappsd-state-estimator

# ----------------------------------------------------
# INSTALL Ochre
# ----------------------------------------------------
RUN cd /gridappsd/services/ \
    && git clone https://github.com/gridappsd/gridappsd-ochre \
    && cd /gridappsd/services/gridappsd-ochre \
    && pip install -r requirements.txt
    && rm -rf /root/.cache/pip/wheels \
    && rm -rf /tmp/Miniconda3-latest-Linux-x86_64.sh

ENV PYTHONPATH=${PYTHONPATH}:/gridappsd/services/gridappsd-ochre
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib64

# ----------------------------------------------------
# Set the JAVA_HOME variable 
# ----------------------------------------------------
ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64
